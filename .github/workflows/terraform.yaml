name: 'Terraform'
on: [push, pull_request]

env:
  TF_LOG: INFO


jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: MSFT
    defaults:
      run:
        shell: bash
        working-directory: ./main

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - uses: Azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'
    - name: Azure Key Vault Secrets
      id: azurekeyvault
      uses: Azure/get-keyvault-secrets@v1
      with:
        keyvault: "kv-tolerant-sawfly"
        secrets: 'ARMClientId, ARMClientSecret, ARMTenantId, ARMSubscriptionId, TerraformResourceGroup, TerraformStorageAccount, TerraformContainerName, TerraformStateFile'
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.2.3
    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true
    - name: Terraform init
      id: init
      env:
        ARM_CLIENT_ID: ${{ steps.azurekeyvault.outputs.ARMClientId }}
        ARM_CLIENT_SECRET: ${{ steps.azurekeyvault.outputs.ARMClientSecret }}
        ARM_TENANT_ID: ${{ steps.azurekeyvault.outputs.ARMTenantId }}
        ARM_SUBSCRIPTION_ID: ${{ steps.azurekeyvault.outputs.ARMSubscriptionId }}
        RESOURCE_GROUP: ${{ steps.azurekeyvault.outputs.TerraformResourceGroup }}
        STORAGE_ACCOUNT: ${{ steps.azurekeyvault.outputs.TerraformStorageAccount }}
        CONTAINER_NAME: ${{ steps.azurekeyvault.outputs.TerraformContainerName }}
        TF_BACKEND_STATE_KEY: ${{ steps.azurekeyvault.outputs.TerraformStateFile }}
      run: terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT" -backend-config="container_name=$CONTAINER_NAME" -backend-config="key=$TF_BACKEND_STATE_KEY" -backend-config="resource_group_name=$RESOURCE_GROUP"

    - name: Terraform plan 
      id: plan
      env:
        ARM_CLIENT_ID: ${{ steps.azurekeyvault.outputs.ARMClientId }}
        ARM_CLIENT_SECRET: ${{ steps.azurekeyvault.outputs.ARMClientSecret }}
        ARM_TENANT_ID: ${{ steps.azurekeyvault.outputs.ARMTenantId }}
        ARM_SUBSCRIPTION_ID: ${{ steps.azurekeyvault.outputs.ARMSubscriptionId }}
      if: github.event_name == 'pull_request'
      run: terraform plan -var="client_id=${{ secrets.ARM_CLIENT_ID }}" -var="client_secret=${{ secrets.ARM_CLIENT_SECRET }}" -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" -var="slade_home_ip=${{ steps.azurekeyvault.outputs.SladeHomeIp }}" -var="slade_home_network=${{ steps.azurekeyvault.outputs.SladeHomeNetwork" }} -no-color

    # Add a comment to pull requests with plan results
    - name: add-plan-comment
      id: comment
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`${process.env.PLAN}\`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

      # On push to main, build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      env:
        ARM_CLIENT_ID: ${{ steps.azurekeyvault.outputs.ARMClientId }}
        ARM_CLIENT_SECRET: ${{ steps.azurekeyvault.outputs.ARMClientSecret }}
        ARM_TENANT_ID: ${{ steps.azurekeyvault.outputs.ARMTenantId }}
        ARM_SUBSCRIPTION_ID: ${{ steps.azurekeyvault.outputs.ARMSubscriptionId }}
      run: terraform apply -var="client_id=${{ secrets.ARM_CLIENT_ID }}" -var="client_secret=${{ secrets.ARM_CLIENT_SECRET }}" -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" -var="slade_home_ip=${{ steps.azurekeyvault.outputs.SladeHomeIp }}" -var="slade_home_network=${{ steps.azurekeyvault.outputs.SladeHomeNetwork" }} -no-color -auto-approve
